---
###############################################################################
# Initial Setup

- name: Install Additional Packages
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - rng-tools
  notify: Restart Tomcat

- name: Enable RNGD
  service:
    name: rngd
    state: started
    enabled: yes
  notify: Restart Tomcat

###############################################################################
# Create Deploy Directory and Transfer Base Libs
#

- name: Make ESM Base Directory
  file:
    path: "{{ esm_base }}"
    state: directory
    owner: "{{ esm_user }}"
    group: "{{ esm_group }}"

- name: Make ESM Deploy Directory
  file:
    path: "{{ esm_deploy_directory }}"
    state: directory
    owner: "{{ esm_user }}"
    group: "{{ esm_group }}"

- name: Set esm_deploy_present on absence or presence of esm_deploy_zip variable
  set_fact:
    esm_deploy_exists: "{{ esm_deploy_zip is defined and esm_deploy_zip not in (None, '')}}"

- name: Unzip Deploy Libs To Deploy Dir
  unarchive:
    src: "{{ esm_deploy_zip }}"
    dest: "{{ esm_deploy_directory }}"
  when: esm_deploy_exists

###############################################################################
# Create the Solution Manager Application Data Directory

- name: Make ESM Data Directory
  file:
    path: "{{ esm_data_directory }}"
    state: directory
    owner: "{{ esm_user }}"
    group: "{{ esm_group }}"


- name: Apply Admin App Config
  template:
    dest: "{{ esm_data_directory }}/config.properties"
    owner: "{{ esm_user }}"
    group: "{{ esm_group }}"
    mode: 0600
    src: config.properties.j2

- name: Apply Admin App Prod Code Map
  template:
    dest: "{{ esm_data_directory }}/ProdCodeMap.txt"
    owner: "{{ esm_user }}"
    group: "{{ esm_group }}"
    mode: 0600
    src: ProdCodeMap.txt.j2


###############################################################################
# Configure/Install Database Directory

- name: Make ESM User .grails Directory
  file:
    path: "{{ esm_grails_directory }}"
    state: directory
    owner: "{{ esm_user }}"
    group: "{{ esm_group }}"

- name: Create Configuration Database Encryption Key
  become: yes
  become_user: "{{ esm_user }}"
  command: java -classpath "{{ esm_deploy_directory }}/adminutils.jar:{{ esm_deploy_directory }}/commons-codec-1.5.jar" adminutils.codec.AdminCodecUtils {{ esm_database_file_password }} {{ esm_database_user_password }} {{ esm_database_user_name }} {{ esm_data_directory }}
  args:
    chdir: "{{ esm_deploy_directory }}"
    creates: "{{ esm_grails_directory }}/admin-config.properties"
  when: esm_deploy_exists


###############################################################################
# Handle Tomcat Deployment

- name: Deploy Jenkins To Tomcat Server
  copy:
    remote_src: yes
    dest: "{{ tomcat_catalina_home }}/webapps/jenkins.war"
    src: "{{ jenkins_jar_location }}"
    owner: "{{ esm_user }}"
    group: "{{ esm_group }}"
  notify: Restart Tomcat

- name: Deploy ESM Admin War To Tomcat Server
  copy:
    src: "{{ esm_deploy_directory }}/admin.war"
    dest: "{{ tomcat_catalina_home }}/webapps/admin.war"
    owner: "{{ esm_user }}"
    group: "{{ esm_group }}"
  when: esm_deploy_exists
  notify: Restart Tomcat

###############################################################################
# Configure Jenkins

- name: Flush Handler To Configure Tomcat Apps
  meta: flush_handlers

- name: Wait For Jenkins Configuration to Complete
  wait_for:
    path: "{{ jenkins_initialAdminPassword_location }}"

- name: Capture Jenkins Initial Admin Password
  command: cat {{ jenkins_initialAdminPassword_location }}
  register: __jenkins_defaultPassword
  changed_when: false

- name: Utilize Jenkins CLI
  command: java -jar {{ tomcat_catalina_home }}/webapps/jenkins/WEB-INF/jenkins-cli.jar -s 0.0.0.0:8080/jenkins help
  changed_when: false
  register: __jenkins_cli_response

- debug: var=__jenkins_cli_response.stdout_lines
